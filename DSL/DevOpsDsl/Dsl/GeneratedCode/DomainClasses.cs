//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass DevOps
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.DevOps.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.DevOps.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("db8b3ebd-5f08-4607-9624-c334d61e065c")]
	public partial class DevOps : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DevOps domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb8b3ebd, 0x5f08, 0x4607, 0x96, 0x24, 0xc3, 0x34, 0xd6, 0x1e, 0x06, 0x5c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevOps(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevOps(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelName domain property code
		
		/// <summary>
		/// ModelName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelNameDomainPropertyId = new global::System.Guid(0x94107c8c, 0x366b, 0x492c, 0x8f, 0xbb, 0x5d, 0x2d, 0x15, 0xd3, 0x02, 0xa6);
		
		/// <summary>
		/// Storage for ModelName
		/// </summary>
		private global::System.String modelNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelName domain property.
		/// Description for Variamos.DevOpsDsl.DevOps.Model Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.DevOps/ModelName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.DevOps/ModelName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("94107c8c-366b-492c-8fbb-5d2d15d302a6")]
		public global::System.String ModelName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DevOps.ModelName domain property.
		/// </summary>
		internal sealed partial class ModelNamePropertyHandler : DslModeling::DomainPropertyValueHandler<DevOps, global::System.String>
		{
			private ModelNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DevOps.ModelName domain property value handler.
			/// </summary>
			public static readonly ModelNamePropertyHandler Instance = new ModelNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DevOps.ModelName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DevOps element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DevOps element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Application opposite domain role accessor
		/// <summary>
		/// Gets or sets Application.
		/// Description for Variamos.DevOpsDsl.DevOpsHasApplication.DevOps
		/// </summary>
		public virtual Application Application
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.DevOpsHasApplication.DevOpsDomainRoleId) as Application;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.DevOpsHasApplication.DevOpsDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Variamos.DevOpsDsl.Application.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: DevOpsHasApplication.Application
					if (this.Application != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Variamos.DevOpsDsl.Application sourceApplication1 = sourceElement as global::Variamos.DevOpsDsl.Application;
			if (sourceApplication1 != null)
			{
				// Create link for path DevOpsHasApplication.Application
				this.Application = sourceApplication1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Variamos.DevOpsDsl.Application sourceApplication1 = sourceElement as global::Variamos.DevOpsDsl.Application;
			if (sourceApplication1 != null)
			{
				// Delete link for path DevOpsHasApplication.Application
				
				foreach (DslModeling::ElementLink link in global::Variamos.DevOpsDsl.DevOpsHasApplication.GetLinks((global::Variamos.DevOpsDsl.DevOps)this, sourceApplication1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Variamos.DevOpsDsl.DevOpsHasApplication.DevOpsDomainRoleId, global::Variamos.DevOpsDsl.DevOpsHasApplication.ApplicationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass Application
	/// Description for Variamos.DevOpsDsl.Application
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f949ca15-dd78-42a0-ac99-24f2afa6c886")]
	public partial class Application : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Application domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf949ca15, 0xdd78, 0x42a0, 0xac, 0x99, 0x24, 0xf2, 0xaf, 0xa6, 0xc8, 0x86);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Application(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Application(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ApplicationName domain property code
		
		/// <summary>
		/// ApplicationName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ApplicationNameDomainPropertyId = new global::System.Guid(0x4b1c5f9a, 0x09eb, 0x4b8c, 0xad, 0x25, 0xe1, 0x5a, 0xa5, 0xbd, 0x62, 0x9a);
		
		/// <summary>
		/// Storage for ApplicationName
		/// </summary>
		private global::System.String applicationNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ApplicationName domain property.
		/// Description for Variamos.DevOpsDsl.Application.Application Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application/ApplicationName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application/ApplicationName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4b1c5f9a-09eb-4b8c-ad25-e15aa5bd629a")]
		public global::System.String ApplicationName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return applicationNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ApplicationNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.ApplicationName domain property.
		/// </summary>
		internal sealed partial class ApplicationNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Application, global::System.String>
		{
			private ApplicationNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.ApplicationName domain property value handler.
			/// </summary>
			public static readonly ApplicationNamePropertyHandler Instance = new ApplicationNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.ApplicationName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ApplicationNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.applicationNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.applicationNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CloudPlatform domain property code
		
		/// <summary>
		/// CloudPlatform domain property Id.
		/// </summary>
		public static readonly global::System.Guid CloudPlatformDomainPropertyId = new global::System.Guid(0xb35186f9, 0x19ab, 0x4a97, 0x8c, 0xba, 0x0a, 0x34, 0xc7, 0x71, 0x3e, 0x94);
		
		/// <summary>
		/// Storage for CloudPlatform
		/// </summary>
		private CloudProvider cloudPlatformPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CloudPlatform domain property.
		/// Description for Variamos.DevOpsDsl.Application.Cloud Platform
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application/CloudPlatform.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application/CloudPlatform.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b35186f9-19ab-4a97-8cba-0a34c7713e94")]
		public CloudProvider CloudPlatform
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cloudPlatformPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CloudPlatformPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.CloudPlatform domain property.
		/// </summary>
		internal sealed partial class CloudPlatformPropertyHandler : DslModeling::DomainPropertyValueHandler<Application, CloudProvider>
		{
			private CloudPlatformPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.CloudPlatform domain property value handler.
			/// </summary>
			public static readonly CloudPlatformPropertyHandler Instance = new CloudPlatformPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.CloudPlatform domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CloudPlatformDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed CloudProvider GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cloudPlatformPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, CloudProvider newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				CloudProvider oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cloudPlatformPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DevOps opposite domain role accessor
		/// <summary>
		/// Gets or sets DevOps.
		/// Description for Variamos.DevOpsDsl.DevOpsHasApplication.Application
		/// </summary>
		public virtual DevOps DevOps
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.DevOpsHasApplication.ApplicationDomainRoleId) as DevOps;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.DevOpsHasApplication.ApplicationDomainRoleId, value);
			}
		}
		#endregion
		#region DevopsCategories opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DevopsCategories.
		/// Description for Variamos.DevOpsDsl.ApplicationHasDevopsCategories.Application
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DevopsCategory> DevopsCategories
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DevopsCategory>, DevopsCategory>(global::Variamos.DevOpsDsl.ApplicationHasDevopsCategories.ApplicationDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Variamos.DevOpsDsl.DevopsCategory.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Variamos.DevOpsDsl.DevopsCategory sourceDevopsCategory1 = sourceElement as global::Variamos.DevOpsDsl.DevopsCategory;
			if (sourceDevopsCategory1 != null)
			{
				// Create link for path ApplicationHasDevopsCategories.DevopsCategories
				this.DevopsCategories.Add(sourceDevopsCategory1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Variamos.DevOpsDsl.DevopsCategory sourceDevopsCategory1 = sourceElement as global::Variamos.DevOpsDsl.DevopsCategory;
			if (sourceDevopsCategory1 != null)
			{
				// Delete link for path ApplicationHasDevopsCategories.DevopsCategories
				
				foreach (DslModeling::ElementLink link in global::Variamos.DevOpsDsl.ApplicationHasDevopsCategories.GetLinks((global::Variamos.DevOpsDsl.Application)this, sourceDevopsCategory1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Variamos.DevOpsDsl.ApplicationHasDevopsCategories.ApplicationDomainRoleId, global::Variamos.DevOpsDsl.ApplicationHasDevopsCategories.DevopsCategoryDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass DevopsCategory
	/// Description for Variamos.DevOpsDsl.DevopsCategory
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.DevopsCategory.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.DevopsCategory.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f1e36ca0-cf54-4987-98a8-e29d8d78f5a2")]
	public partial class DevopsCategory : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DevopsCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1e36ca0, 0xcf54, 0x4987, 0x98, 0xa8, 0xe2, 0x9d, 0x8d, 0x78, 0xf5, 0xa2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevopsCategory(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevopsCategory(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CategoryName domain property code
		
		/// <summary>
		/// CategoryName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryNameDomainPropertyId = new global::System.Guid(0x6befe385, 0x84c0, 0x499f, 0xbf, 0x6e, 0xe1, 0xbc, 0x5b, 0xa0, 0x5e, 0x83);
		
		/// <summary>
		/// Storage for CategoryName
		/// </summary>
		private global::System.String categoryNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CategoryName domain property.
		/// Description for Variamos.DevOpsDsl.DevopsCategory.Category Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.DevopsCategory/CategoryName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.DevopsCategory/CategoryName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6befe385-84c0-499f-bf6e-e1bc5ba05e83")]
		public global::System.String CategoryName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DevopsCategory.CategoryName domain property.
		/// </summary>
		internal sealed partial class CategoryNamePropertyHandler : DslModeling::DomainPropertyValueHandler<DevopsCategory, global::System.String>
		{
			private CategoryNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DevopsCategory.CategoryName domain property value handler.
			/// </summary>
			public static readonly CategoryNamePropertyHandler Instance = new CategoryNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DevopsCategory.CategoryName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DevopsCategory element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DevopsCategory element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Application opposite domain role accessor
		/// <summary>
		/// Gets or sets Application.
		/// Description for Variamos.DevOpsDsl.ApplicationHasDevopsCategories.DevopsCategory
		/// </summary>
		public virtual Application Application
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.ApplicationHasDevopsCategories.DevopsCategoryDomainRoleId) as Application;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.ApplicationHasDevopsCategories.DevopsCategoryDomainRoleId, value);
			}
		}
		#endregion
		#region DevopsPracticed opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DevopsPracticed.
		/// Description for
		/// Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.DevopsCategory
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DevopsPractice> DevopsPracticed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DevopsPractice>, DevopsPractice>(global::Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.DevopsCategoryDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Variamos.DevOpsDsl.DevopsPractice.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Variamos.DevOpsDsl.DevopsPractice sourceDevopsPractice1 = sourceElement as global::Variamos.DevOpsDsl.DevopsPractice;
			if (sourceDevopsPractice1 != null)
			{
				// Create link for path DevopsCategoryHasDevopsPracticed.DevopsPracticed
				this.DevopsPracticed.Add(sourceDevopsPractice1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Variamos.DevOpsDsl.DevopsPractice sourceDevopsPractice1 = sourceElement as global::Variamos.DevOpsDsl.DevopsPractice;
			if (sourceDevopsPractice1 != null)
			{
				// Delete link for path DevopsCategoryHasDevopsPracticed.DevopsPracticed
				
				foreach (DslModeling::ElementLink link in global::Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.GetLinks((global::Variamos.DevOpsDsl.DevopsCategory)this, sourceDevopsPractice1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.DevopsCategoryDomainRoleId, global::Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.DevopsPracticeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass DevopsPractice
	/// Description for Variamos.DevOpsDsl.DevopsPractice
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.DevopsPractice.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.DevopsPractice.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4f93e5a4-f9ef-4d17-9ccf-cdc28bae346d")]
	public partial class DevopsPractice : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DevopsPractice domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4f93e5a4, 0xf9ef, 0x4d17, 0x9c, 0xcf, 0xcd, 0xc2, 0x8b, 0xae, 0x34, 0x6d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevopsPractice(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevopsPractice(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PracticeName domain property code
		
		/// <summary>
		/// PracticeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid PracticeNameDomainPropertyId = new global::System.Guid(0xed16eb6a, 0x4967, 0x40b1, 0x87, 0x5d, 0x33, 0x23, 0x3a, 0xa3, 0xd2, 0x40);
		
		/// <summary>
		/// Storage for PracticeName
		/// </summary>
		private global::System.String practiceNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PracticeName domain property.
		/// Description for Variamos.DevOpsDsl.DevopsPractice.Practice Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.DevopsPractice/PracticeName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.DevopsPractice/PracticeName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ed16eb6a-4967-40b1-875d-33233aa3d240")]
		public global::System.String PracticeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return practiceNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PracticeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DevopsPractice.PracticeName domain property.
		/// </summary>
		internal sealed partial class PracticeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<DevopsPractice, global::System.String>
		{
			private PracticeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DevopsPractice.PracticeName domain property value handler.
			/// </summary>
			public static readonly PracticeNamePropertyHandler Instance = new PracticeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DevopsPractice.PracticeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PracticeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DevopsPractice element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.practiceNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DevopsPractice element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.practiceNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DevopsCategory opposite domain role accessor
		/// <summary>
		/// Gets or sets DevopsCategory.
		/// Description for
		/// Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.DevopsPractice
		/// </summary>
		public virtual DevopsCategory DevopsCategory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.DevopsPracticeDomainRoleId) as DevopsCategory;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.DevopsCategoryHasDevopsPracticed.DevopsPracticeDomainRoleId, value);
			}
		}
		#endregion
	}
}
