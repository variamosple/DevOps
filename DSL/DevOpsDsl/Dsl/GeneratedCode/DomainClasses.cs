//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass Application
	/// Application to be implemnted DevOps best practices
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (ApplicationName = {applicationNamePropertyStorage})")]
	[DslModeling::DomainObjectId("53fa3ae4-60e5-44d4-9a97-0d287f987aa9")]
	public partial class Application : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Application domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53fa3ae4, 0x60e5, 0x44d4, 0x9a, 0x97, 0x0d, 0x28, 0x7f, 0x98, 0x7a, 0xa9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Application(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Application(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ApplicationName domain property code
		
		/// <summary>
		/// ApplicationName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ApplicationNameDomainPropertyId = new global::System.Guid(0xe449a9e4, 0xb5b2, 0x4013, 0x8a, 0x30, 0x7a, 0xd6, 0xf1, 0x45, 0xe6, 0x09);
		
		/// <summary>
		/// Storage for ApplicationName
		/// </summary>
		private global::System.String applicationNamePropertyStorage = "My application";
		
		/// <summary>
		/// Gets or sets the value of ApplicationName domain property.
		/// Name of the Application
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application/ApplicationName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application/ApplicationName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("My application")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("e449a9e4-b5b2-4013-8a30-7ad6f145e609")]
		public global::System.String ApplicationName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return applicationNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ApplicationNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.ApplicationName domain property.
		/// </summary>
		internal sealed partial class ApplicationNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Application, global::System.String>
		{
			private ApplicationNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.ApplicationName domain property value handler.
			/// </summary>
			public static readonly ApplicationNamePropertyHandler Instance = new ApplicationNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.ApplicationName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ApplicationNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.applicationNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.applicationNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CloudProvider domain property code
		
		/// <summary>
		/// CloudProvider domain property Id.
		/// </summary>
		public static readonly global::System.Guid CloudProviderDomainPropertyId = new global::System.Guid(0x0ad05fd2, 0x69be, 0x4ea1, 0xab, 0xb1, 0xd6, 0x8b, 0xfd, 0xec, 0x89, 0xd9);
		
		/// <summary>
		/// Storage for CloudProvider
		/// </summary>
		private CloudProvider cloudProviderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CloudProvider domain property.
		/// Cloud provider that host the application
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application/CloudProvider.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application/CloudProvider.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0ad05fd2-69be-4ea1-abb1-d68bfdec89d9")]
		public CloudProvider CloudProvider
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cloudProviderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CloudProviderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.CloudProvider domain property.
		/// </summary>
		internal sealed partial class CloudProviderPropertyHandler : DslModeling::DomainPropertyValueHandler<Application, CloudProvider>
		{
			private CloudProviderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.CloudProvider domain property value handler.
			/// </summary>
			public static readonly CloudProviderPropertyHandler Instance = new CloudProviderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.CloudProvider domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CloudProviderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed CloudProvider GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cloudProviderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, CloudProvider newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				CloudProvider oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cloudProviderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ArchitecturalStyle domain property code
		
		/// <summary>
		/// ArchitecturalStyle domain property Id.
		/// </summary>
		public static readonly global::System.Guid ArchitecturalStyleDomainPropertyId = new global::System.Guid(0x90ce1392, 0xa03b, 0x46df, 0xb0, 0x86, 0xe7, 0x9a, 0x8d, 0x97, 0xd8, 0x57);
		
		/// <summary>
		/// Storage for ArchitecturalStyle
		/// </summary>
		private ArchitecturalStyles architecturalStylePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ArchitecturalStyle domain property.
		/// Description for Variamos.DevOpsDsl.Application.Architectural Style
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application/ArchitecturalStyle.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application/ArchitecturalStyle.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("90ce1392-a03b-46df-b086-e79a8d97d857")]
		public ArchitecturalStyles ArchitecturalStyle
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return architecturalStylePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ArchitecturalStylePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.ArchitecturalStyle domain property.
		/// </summary>
		internal sealed partial class ArchitecturalStylePropertyHandler : DslModeling::DomainPropertyValueHandler<Application, ArchitecturalStyles>
		{
			private ArchitecturalStylePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.ArchitecturalStyle domain property value handler.
			/// </summary>
			public static readonly ArchitecturalStylePropertyHandler Instance = new ArchitecturalStylePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.ArchitecturalStyle domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ArchitecturalStyleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ArchitecturalStyles GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.architecturalStylePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, ArchitecturalStyles newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ArchitecturalStyles oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.architecturalStylePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelVersion domain property code
		
		/// <summary>
		/// ModelVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelVersionDomainPropertyId = new global::System.Guid(0xbc7e168c, 0x8c5d, 0x428f, 0xba, 0x4e, 0x42, 0x72, 0x68, 0xb3, 0x3f, 0x96);
		
		/// <summary>
		/// Storage for ModelVersion
		/// </summary>
		private global::System.String modelVersionPropertyStorage = "0.0.0";
		
		/// <summary>
		/// Gets or sets the value of ModelVersion domain property.
		/// Version of the model
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application/ModelVersion.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application/ModelVersion.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("0.0.0")]
		[DslModeling::DomainObjectId("bc7e168c-8c5d-428f-ba4e-427268b33f96")]
		public global::System.String ModelVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.ModelVersion domain property.
		/// </summary>
		internal sealed partial class ModelVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<Application, global::System.String>
		{
			private ModelVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.ModelVersion domain property value handler.
			/// </summary>
			public static readonly ModelVersionPropertyHandler Instance = new ModelVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.ModelVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xd78e4e1a, 0xd5bb, 0x475f, 0x90, 0x23, 0x2a, 0xfd, 0x87, 0xaf, 0x43, 0xe3);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for Variamos.DevOpsDsl.Application.Description
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Application/Description.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Application/Description.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d78e4e1a-d5bb-475f-9023-2afd87af43e3")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Application, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Containers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Containers.
		/// Description for Variamos.DevOpsDsl.ApplicationHasContainers.Application
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Container> Containers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(global::Variamos.DevOpsDsl.ApplicationHasContainers.ApplicationDomainRoleId);
			}
		}
		#endregion
		#region Sre opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sre.
		/// Description for Variamos.DevOpsDsl.ApplicationHasSre.Application
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sre> Sre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sre>, Sre>(global::Variamos.DevOpsDsl.ApplicationHasSre.ApplicationDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Variamos.DevOpsDsl.Container.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Variamos.DevOpsDsl.Sre.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Variamos.DevOpsDsl.Container sourceContainer1 = sourceElement as global::Variamos.DevOpsDsl.Container;
			if (sourceContainer1 != null)
			{
				// Create link for path ApplicationHasContainers.Containers
				this.Containers.Add(sourceContainer1);

				return;
			}
				
			global::Variamos.DevOpsDsl.Sre sourceSre2 = sourceElement as global::Variamos.DevOpsDsl.Sre;
			if (sourceSre2 != null)
			{
				// Create link for path ApplicationHasSre.Sre
				this.Sre.Add(sourceSre2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Variamos.DevOpsDsl.Container sourceContainer1 = sourceElement as global::Variamos.DevOpsDsl.Container;
			if (sourceContainer1 != null)
			{
				// Delete link for path ApplicationHasContainers.Containers
				
				foreach (DslModeling::ElementLink link in global::Variamos.DevOpsDsl.ApplicationHasContainers.GetLinks((global::Variamos.DevOpsDsl.Application)this, sourceContainer1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Variamos.DevOpsDsl.ApplicationHasContainers.ApplicationDomainRoleId, global::Variamos.DevOpsDsl.ApplicationHasContainers.ContainerDomainRoleId);
				}

				return;
			}
				
			global::Variamos.DevOpsDsl.Sre sourceSre2 = sourceElement as global::Variamos.DevOpsDsl.Sre;
			if (sourceSre2 != null)
			{
				// Delete link for path ApplicationHasSre.Sre
				
				foreach (DslModeling::ElementLink link in global::Variamos.DevOpsDsl.ApplicationHasSre.GetLinks((global::Variamos.DevOpsDsl.Application)this, sourceSre2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Variamos.DevOpsDsl.ApplicationHasSre.ApplicationDomainRoleId, global::Variamos.DevOpsDsl.ApplicationHasSre.SreDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass Container
	/// Description for Variamos.DevOpsDsl.Container
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Container.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Container.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (ContainerName = {containerNamePropertyStorage})")]
	[DslModeling::DomainObjectId("89646196-a8a0-4186-a288-4384229596fd")]
	public partial class Container : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Container domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89646196, 0xa8a0, 0x4186, 0xa2, 0x88, 0x43, 0x84, 0x22, 0x95, 0x96, 0xfd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Container(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Container(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ContainerName domain property code
		
		/// <summary>
		/// ContainerName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ContainerNameDomainPropertyId = new global::System.Guid(0x7e652c65, 0x8339, 0x43a0, 0xa5, 0xca, 0x53, 0x73, 0xd1, 0x8d, 0x41, 0x6d);
		
		/// <summary>
		/// Storage for ContainerName
		/// </summary>
		private global::System.String containerNamePropertyStorage = "My container";
		
		/// <summary>
		/// Gets or sets the value of ContainerName domain property.
		/// Description for Variamos.DevOpsDsl.Container.Container Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Container/ContainerName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Container/ContainerName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("My container")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("7e652c65-8339-43a0-a5ca-5373d18d416d")]
		public global::System.String ContainerName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return containerNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ContainerNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Container.ContainerName domain property.
		/// </summary>
		internal sealed partial class ContainerNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Container, global::System.String>
		{
			private ContainerNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Container.ContainerName domain property value handler.
			/// </summary>
			public static readonly ContainerNamePropertyHandler Instance = new ContainerNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Container.ContainerName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ContainerNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Container element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.containerNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Container element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.containerNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ContainerType domain property code
		
		/// <summary>
		/// ContainerType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ContainerTypeDomainPropertyId = new global::System.Guid(0xdc7f5787, 0x9f3a, 0x4049, 0xad, 0xcd, 0xd9, 0xf9, 0xb4, 0x06, 0xbd, 0x08);
		
		/// <summary>
		/// Storage for ContainerType
		/// </summary>
		private ContainerType containerTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ContainerType domain property.
		/// Description for Variamos.DevOpsDsl.Container.Container Type
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Container/ContainerType.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Container/ContainerType.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dc7f5787-9f3a-4049-adcd-d9f9b406bd08")]
		public ContainerType ContainerType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return containerTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ContainerTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Container.ContainerType domain property.
		/// </summary>
		internal sealed partial class ContainerTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Container, ContainerType>
		{
			private ContainerTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Container.ContainerType domain property value handler.
			/// </summary>
			public static readonly ContainerTypePropertyHandler Instance = new ContainerTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Container.ContainerType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ContainerTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ContainerType GetValue(Container element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.containerTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Container element, ContainerType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ContainerType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.containerTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ContainerFramework domain property code
		
		/// <summary>
		/// ContainerFramework domain property Id.
		/// </summary>
		public static readonly global::System.Guid ContainerFrameworkDomainPropertyId = new global::System.Guid(0x526dfc90, 0x984b, 0x4d31, 0x8d, 0x8a, 0xa8, 0x13, 0x9c, 0xd3, 0xf4, 0x0f);
		
		/// <summary>
		/// Storage for ContainerFramework
		/// </summary>
		private DevelopmentFrameworks containerFrameworkPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ContainerFramework domain property.
		/// Description for Variamos.DevOpsDsl.Container.Container Framework
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Container/ContainerFramework.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Container/ContainerFramework.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("526dfc90-984b-4d31-8d8a-a8139cd3f40f")]
		public DevelopmentFrameworks ContainerFramework
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return containerFrameworkPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ContainerFrameworkPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Container.ContainerFramework domain property.
		/// </summary>
		internal sealed partial class ContainerFrameworkPropertyHandler : DslModeling::DomainPropertyValueHandler<Container, DevelopmentFrameworks>
		{
			private ContainerFrameworkPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Container.ContainerFramework domain property value handler.
			/// </summary>
			public static readonly ContainerFrameworkPropertyHandler Instance = new ContainerFrameworkPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Container.ContainerFramework domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ContainerFrameworkDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DevelopmentFrameworks GetValue(Container element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.containerFrameworkPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Container element, DevelopmentFrameworks newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DevelopmentFrameworks oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.containerFrameworkPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Application opposite domain role accessor
		/// <summary>
		/// Gets or sets Application.
		/// Description for Variamos.DevOpsDsl.ApplicationHasContainers.Container
		/// </summary>
		public virtual Application Application
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.ApplicationHasContainers.ContainerDomainRoleId) as Application;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.ApplicationHasContainers.ContainerDomainRoleId, value);
			}
		}
		#endregion
		#region Practiced opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Practiced.
		/// Description for Variamos.DevOpsDsl.ContainerHasPracticed.Container
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Practice> Practiced
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Practice>, Practice>(global::Variamos.DevOpsDsl.ContainerHasPracticed.ContainerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Variamos.DevOpsDsl.Practice.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Variamos.DevOpsDsl.Practice sourcePractice1 = sourceElement as global::Variamos.DevOpsDsl.Practice;
			if (sourcePractice1 != null)
			{
				// Create link for path ContainerHasPracticed.Practiced
				this.Practiced.Add(sourcePractice1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Variamos.DevOpsDsl.Practice sourcePractice1 = sourceElement as global::Variamos.DevOpsDsl.Practice;
			if (sourcePractice1 != null)
			{
				// Delete link for path ContainerHasPracticed.Practiced
				
				foreach (DslModeling::ElementLink link in global::Variamos.DevOpsDsl.ContainerHasPracticed.GetLinks((global::Variamos.DevOpsDsl.Container)this, sourcePractice1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Variamos.DevOpsDsl.ContainerHasPracticed.ContainerDomainRoleId, global::Variamos.DevOpsDsl.ContainerHasPracticed.PracticeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass Practice
	/// Description for Variamos.DevOpsDsl.Practice
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Practice.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Practice.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (PracticeName = {PracticeName})")]
	[DslModeling::DomainObjectId("3fba09f1-07e3-4ebf-8039-06613d70913a")]
	public partial class Practice : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Practice domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3fba09f1, 0x07e3, 0x4ebf, 0x80, 0x39, 0x06, 0x61, 0x3d, 0x70, 0x91, 0x3a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Practice(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Practice(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PracticeType domain property code
		
		/// <summary>
		/// PracticeType domain property Id.
		/// </summary>
		public static readonly global::System.Guid PracticeTypeDomainPropertyId = new global::System.Guid(0x7fa1949c, 0x3098, 0x44bf, 0x87, 0x44, 0x69, 0x10, 0x32, 0x52, 0xf3, 0xd1);
		
		/// <summary>
		/// Storage for PracticeType
		/// </summary>
		private DevOpsPractices practiceTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of PracticeType domain property.
		/// Description for Variamos.DevOpsDsl.Practice.Practice Type
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Practice/PracticeType.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Practice/PracticeType.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7fa1949c-3098-44bf-8744-69103252f3d1")]
		public DevOpsPractices PracticeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return practiceTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PracticeTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Practice.PracticeType domain property.
		/// </summary>
		internal sealed partial class PracticeTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Practice, DevOpsPractices>
		{
			private PracticeTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Practice.PracticeType domain property value handler.
			/// </summary>
			public static readonly PracticeTypePropertyHandler Instance = new PracticeTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Practice.PracticeType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PracticeTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DevOpsPractices GetValue(Practice element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.practiceTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Practice element, DevOpsPractices newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DevOpsPractices oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.practiceTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PracticeName domain property code
		
		/// <summary>
		/// PracticeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid PracticeNameDomainPropertyId = new global::System.Guid(0x68410d3a, 0x4f59, 0x4cfe, 0xbb, 0x57, 0x49, 0xba, 0x19, 0x6a, 0xb5, 0xc1);
		
		/// <summary>
		/// Gets or sets the value of PracticeName domain property.
		/// Description for Variamos.DevOpsDsl.Practice.Practice Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Practice/PracticeName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Practice/PracticeName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Practice.PracticeName")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("68410d3a-4f59-4cfe-bb57-49ba196ab5c1")]
		public global::System.String PracticeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return PracticeNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Practice.PracticeName domain property.
		/// </summary>
		internal sealed partial class PracticeNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<Practice, global::System.String>
		{
			private PracticeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Practice.PracticeName domain property value handler.
			/// </summary>
			public static readonly PracticeNamePropertyHandler Instance = new PracticeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Practice.PracticeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PracticeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Practice element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for PracticeName because its Kind is
				// set to Calculated. Please provide the GetPracticeNameValue()
				// method on the domain class.
				return element.GetPracticeNameValue();
			}
		
		}
		
		#endregion
		#region ImplementedValue domain property code
		
		/// <summary>
		/// ImplementedValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImplementedValueDomainPropertyId = new global::System.Guid(0x9478b1a3, 0x2f5c, 0x451c, 0xbc, 0x7d, 0x71, 0x79, 0xcb, 0xe1, 0x16, 0x5f);
		
		/// <summary>
		/// Storage for ImplementedValue
		/// </summary>
		private DevOpsPracticesAdoptionValue implementedValuePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ImplementedValue domain property.
		/// % of implementation value. Fully Implemented (FI): 100%​, Largely Implemented
		/// (LI): [51,99] %​, Partially Implemented (PI) : [21,50]%​, Not Implemented (NI):
		/// [1,20] %​, Not Yet (NY): 0%
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Practice/ImplementedValue.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Practice/ImplementedValue.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9478b1a3-2f5c-451c-bc7d-7179cbe1165f")]
		public DevOpsPracticesAdoptionValue ImplementedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return implementedValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImplementedValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Practice.ImplementedValue domain property.
		/// </summary>
		internal sealed partial class ImplementedValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Practice, DevOpsPracticesAdoptionValue>
		{
			private ImplementedValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Practice.ImplementedValue domain property value handler.
			/// </summary>
			public static readonly ImplementedValuePropertyHandler Instance = new ImplementedValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Practice.ImplementedValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImplementedValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DevOpsPracticesAdoptionValue GetValue(Practice element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.implementedValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Practice element, DevOpsPracticesAdoptionValue newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DevOpsPracticesAdoptionValue oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.implementedValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Container opposite domain role accessor
		/// <summary>
		/// Gets or sets Container.
		/// Description for Variamos.DevOpsDsl.ContainerHasPracticed.Practice
		/// </summary>
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.ContainerHasPracticed.PracticeDomainRoleId) as Container;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.ContainerHasPracticed.PracticeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass Sre
	/// Site Reliability Engineering settings for the application
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Sre.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Sre.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (SreName = {sreNamePropertyStorage})")]
	[DslModeling::DomainObjectId("cd85ddf3-cf78-4e6e-a2a9-53bd67fd1ca0")]
	public partial class Sre : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sre domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd85ddf3, 0xcf78, 0x4e6e, 0xa2, 0xa9, 0x53, 0xbd, 0x67, 0xfd, 0x1c, 0xa0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sre(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sre(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SreName domain property code
		
		/// <summary>
		/// SreName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SreNameDomainPropertyId = new global::System.Guid(0x42cd10a9, 0x2f6e, 0x4447, 0xaa, 0x29, 0xdd, 0x1e, 0xa3, 0xa4, 0xeb, 0x18);
		
		/// <summary>
		/// Storage for SreName
		/// </summary>
		private global::System.String sreNamePropertyStorage = "Application SRE";
		
		/// <summary>
		/// Gets or sets the value of SreName domain property.
		/// Description for Variamos.DevOpsDsl.Sre.Sre Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.Sre/SreName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.Sre/SreName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Application SRE")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("42cd10a9-2f6e-4447-aa29-dd1ea3a4eb18")]
		public global::System.String SreName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sreNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SreNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sre.SreName domain property.
		/// </summary>
		internal sealed partial class SreNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Sre, global::System.String>
		{
			private SreNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sre.SreName domain property value handler.
			/// </summary>
			public static readonly SreNamePropertyHandler Instance = new SreNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sre.SreName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SreNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Sre element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sreNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sre element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sreNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Application opposite domain role accessor
		/// <summary>
		/// Gets or sets Application.
		/// Description for Variamos.DevOpsDsl.ApplicationHasSre.Sre
		/// </summary>
		public virtual Application Application
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.ApplicationHasSre.SreDomainRoleId) as Application;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.ApplicationHasSre.SreDomainRoleId, value);
			}
		}
		#endregion
		#region SLO opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SLO.
		/// Description for Variamos.DevOpsDsl.SreHasSLO.Sre
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SLO> SLO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SLO>, SLO>(global::Variamos.DevOpsDsl.SreHasSLO.SreDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Variamos.DevOpsDsl.SLO.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Variamos.DevOpsDsl.SLO sourceSLO1 = sourceElement as global::Variamos.DevOpsDsl.SLO;
			if (sourceSLO1 != null)
			{
				// Create link for path SreHasSLO.SLO
				this.SLO.Add(sourceSLO1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Variamos.DevOpsDsl.SLO sourceSLO1 = sourceElement as global::Variamos.DevOpsDsl.SLO;
			if (sourceSLO1 != null)
			{
				// Delete link for path SreHasSLO.SLO
				
				foreach (DslModeling::ElementLink link in global::Variamos.DevOpsDsl.SreHasSLO.GetLinks((global::Variamos.DevOpsDsl.Sre)this, sourceSLO1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Variamos.DevOpsDsl.SreHasSLO.SreDomainRoleId, global::Variamos.DevOpsDsl.SreHasSLO.SLODomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Variamos.DevOpsDsl
{
	/// <summary>
	/// DomainClass SLO
	/// Service Level Objetive
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.SLO.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.DevOpsDsl.SLO.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (SloName = {SloName})")]
	[DslModeling::DomainObjectId("293b3fb7-811a-4759-8baa-2f7d8109a2b5")]
	public partial class SLO : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SLO domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x293b3fb7, 0x811a, 0x4759, 0x8b, 0xaa, 0x2f, 0x7d, 0x81, 0x09, 0xa2, 0xb5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SLO(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SLO(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SloName domain property code
		
		/// <summary>
		/// SloName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SloNameDomainPropertyId = new global::System.Guid(0xf71cdc4e, 0xbf61, 0x4a61, 0x8d, 0x00, 0xc0, 0x96, 0x8a, 0xdf, 0x21, 0x93);
		
		/// <summary>
		/// Gets or sets the value of SloName domain property.
		/// Description for Variamos.DevOpsDsl.SLO.Slo Name
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.SLO/SloName.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.SLO/SloName.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("f71cdc4e-bf61-4a61-8d00-c0968adf2193")]
		public global::System.String SloName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return SloNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the SLO.SloName domain property.
		/// </summary>
		internal sealed partial class SloNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<SLO, global::System.String>
		{
			private SloNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SLO.SloName domain property value handler.
			/// </summary>
			public static readonly SloNamePropertyHandler Instance = new SloNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SLO.SloName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SloNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SLO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for SloName because its Kind is
				// set to Calculated. Please provide the GetSloNameValue()
				// method on the domain class.
				return element.GetSloNameValue();
			}
		
		}
		
		#endregion
		#region LowerBound domain property code
		
		/// <summary>
		/// LowerBound domain property Id.
		/// </summary>
		public static readonly global::System.Guid LowerBoundDomainPropertyId = new global::System.Guid(0x4a3ebddf, 0x54b7, 0x4aa5, 0xa0, 0x6e, 0x0e, 0xd0, 0x6b, 0x58, 0xb7, 0x89);
		
		/// <summary>
		/// Storage for LowerBound
		/// </summary>
		private global::System.Double lowerBoundPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of LowerBound domain property.
		/// Description for Variamos.DevOpsDsl.SLO.Lower Bound
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.SLO/LowerBound.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.SLO/LowerBound.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4a3ebddf-54b7-4aa5-a06e-0ed06b58b789")]
		public global::System.Double LowerBound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lowerBoundPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LowerBoundPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SLO.LowerBound domain property.
		/// </summary>
		internal sealed partial class LowerBoundPropertyHandler : DslModeling::DomainPropertyValueHandler<SLO, global::System.Double>
		{
			private LowerBoundPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SLO.LowerBound domain property value handler.
			/// </summary>
			public static readonly LowerBoundPropertyHandler Instance = new LowerBoundPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SLO.LowerBound domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LowerBoundDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(SLO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.lowerBoundPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SLO element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.lowerBoundPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UpperBound domain property code
		
		/// <summary>
		/// UpperBound domain property Id.
		/// </summary>
		public static readonly global::System.Guid UpperBoundDomainPropertyId = new global::System.Guid(0x5a5cfa5d, 0xe4e0, 0x49c0, 0x91, 0x3f, 0xc7, 0x6a, 0xb2, 0x9a, 0xff, 0x9e);
		
		/// <summary>
		/// Storage for UpperBound
		/// </summary>
		private global::System.Double upperBoundPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UpperBound domain property.
		/// Description for Variamos.DevOpsDsl.SLO.Upper Bound
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.SLO/UpperBound.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.SLO/UpperBound.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5a5cfa5d-e4e0-49c0-913f-c76ab29aff9e")]
		public global::System.Double UpperBound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return upperBoundPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UpperBoundPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SLO.UpperBound domain property.
		/// </summary>
		internal sealed partial class UpperBoundPropertyHandler : DslModeling::DomainPropertyValueHandler<SLO, global::System.Double>
		{
			private UpperBoundPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SLO.UpperBound domain property value handler.
			/// </summary>
			public static readonly UpperBoundPropertyHandler Instance = new UpperBoundPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SLO.UpperBound domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UpperBoundDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(SLO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.upperBoundPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SLO element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.upperBoundPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xe674faf8, 0x19f5, 0x4427, 0xb5, 0xf8, 0x82, 0xe4, 0xf7, 0xc0, 0xcf, 0xbd);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for Variamos.DevOpsDsl.SLO.Description
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.SLO/Description.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.SLO/Description.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e674faf8-19f5-4427-b5f8-82e4f7c0cfbd")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SLO.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<SLO, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SLO.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SLO.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SLO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SLO element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Operator domain property code
		
		/// <summary>
		/// Operator domain property Id.
		/// </summary>
		public static readonly global::System.Guid OperatorDomainPropertyId = new global::System.Guid(0x75c2f44a, 0x0caa, 0x41c6, 0xb7, 0x4f, 0x8e, 0x9f, 0x81, 0x2c, 0x42, 0xda);
		
		/// <summary>
		/// Storage for Operator
		/// </summary>
		private ComparisonOperator operatorPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Operator domain property.
		/// Description for Variamos.DevOpsDsl.SLO.Operator
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.SLO/Operator.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.SLO/Operator.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("75c2f44a-0caa-41c6-b74f-8e9f812c42da")]
		public ComparisonOperator Operator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return operatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OperatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SLO.Operator domain property.
		/// </summary>
		internal sealed partial class OperatorPropertyHandler : DslModeling::DomainPropertyValueHandler<SLO, ComparisonOperator>
		{
			private OperatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SLO.Operator domain property value handler.
			/// </summary>
			public static readonly OperatorPropertyHandler Instance = new OperatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SLO.Operator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OperatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ComparisonOperator GetValue(SLO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.operatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SLO element, ComparisonOperator newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ComparisonOperator oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.operatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SliType domain property code
		
		/// <summary>
		/// SliType domain property Id.
		/// </summary>
		public static readonly global::System.Guid SliTypeDomainPropertyId = new global::System.Guid(0x59864d65, 0xe456, 0x4c74, 0xa6, 0x06, 0x61, 0x62, 0x8e, 0xb9, 0xe9, 0x65);
		
		/// <summary>
		/// Storage for SliType
		/// </summary>
		private SLI sliTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SliType domain property.
		/// Description for Variamos.DevOpsDsl.SLO.Sli Type
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.DevOpsDsl.SLO/SliType.DisplayName", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.DevOpsDsl.SLO/SliType.Description", typeof(global::Variamos.DevOpsDsl.DevOpsDslDomainModel), "Variamos.DevOpsDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("59864d65-e456-4c74-a606-61628eb9e965")]
		public SLI SliType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sliTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SliTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SLO.SliType domain property.
		/// </summary>
		internal sealed partial class SliTypePropertyHandler : DslModeling::DomainPropertyValueHandler<SLO, SLI>
		{
			private SliTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SLO.SliType domain property value handler.
			/// </summary>
			public static readonly SliTypePropertyHandler Instance = new SliTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SLO.SliType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SliTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed SLI GetValue(SLO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sliTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SLO element, SLI newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				SLI oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sliTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Sre opposite domain role accessor
		/// <summary>
		/// Gets or sets Sre.
		/// Description for Variamos.DevOpsDsl.SreHasSLO.SLO
		/// </summary>
		public virtual Sre Sre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Variamos.DevOpsDsl.SreHasSLO.SLODomainRoleId) as Sre;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Variamos.DevOpsDsl.SreHasSLO.SLODomainRoleId, value);
			}
		}
		#endregion
	}
}
